digraph "void setColumnMatrix(int,org.apache.commons.math3.linear.BlockRealMatrix)" {
    label="void setColumnMatrix(int,org.apache.commons.math3.linear.BlockRealMatrix)";
    node [shape=box];
    "0" [style=filled,fillcolor=gray,label="r0 := @this",];
    "1" [label="i0 := @parameter0",];
    "0"->"1";
    "2" [label="r1 := @parameter1",];
    "1"->"2";
    "3" [label="org.apache.commons.math3.linear.MatrixUtils.checkColumnIndex(r0, i0)",];
    "2"->"3";
    "4" [label="i1 = r0.getRowDimension()",];
    "3"->"4";
    "5" [label="$i10 = r1.getRowDimension()",];
    "4"->"5";
    "6" [label="if $i10 != i1 goto label0",];
    "5"->"6";
    "7" [label="$i11 = r1.getColumnDimension()",];
    "6"->"7";
    "9" [label="label0: r8 = new org.apache.commons.math3.linear.MatrixDimensionMismatchException",];
    "6"->"9";
    "8" [label="if $i11 == 1 goto label1",];
    "7"->"8";
    "8"->"9";
    "15" [label="label1: i2 = i0 / 52",];
    "8"->"15";
    "10" [label="$i12 = r1.getRowDimension()",];
    "9"->"10";
    "11" [label="$i13 = r1.getColumnDimension()",];
    "10"->"11";
    "12" [label="specialinvoke r8.<init>($i12, $i13, i1, 1)",];
    "11"->"12";
    "13" [label="r9 = (java.lang.Throwable) r8",];
    "12"->"13";
    "14" [style=filled,fillcolor=lightgray,label="throw r9",];
    "13"->"14";
    "16" [label="$i14 = i2 * 52",];
    "15"->"16";
    "17" [label="i3 = i0 - $i14",];
    "16"->"17";
    "18" [label="i4 = specialinvoke r0.blockWidth(i2)",];
    "17"->"18";
    "19" [label="i5 = 0",];
    "18"->"19";
    "20" [label="i6 = 0",];
    "19"->"20";
    "21" [label="$r5 = r1.blocks",];
    "20"->"21";
    "22" [label="r2 = $r5[i5]",];
    "21"->"22";
    "23" [label="i7 = 0",];
    "22"->"23";
    "24" [label="label2: $i15 = r0.blockRows",];
    "23"->"24";
    "25" [label="if i7 >= $i15 goto label6",];
    "24"->"25";
    "26" [label="i8 = specialinvoke r0.blockHeight(i7)",];
    "25"->"26";
    "50" [style=filled,fillcolor=lightgray,label="label6: return",];
    "25"->"50";
    "27" [label="$r6 = r0.blocks",];
    "26"->"27";
    "28" [label="$i16 = r0.blockColumns",];
    "27"->"28";
    "29" [label="$i17 = i7 * $i16",];
    "28"->"29";
    "30" [label="$i18 = $i17 + i2",];
    "29"->"30";
    "31" [label="r3 = $r6[$i18]",];
    "30"->"31";
    "32" [label="i9 = 0",];
    "31"->"32";
    "33" [label="label3: if i9 >= i8 goto label5",];
    "32"->"33";
    "34" [label="$i19 = lengthof r2",];
    "33"->"34";
    "48" [label="label5: i7 = i7 + 1",];
    "33"->"48";
    "35" [label="if i6 < $i19 goto label4",];
    "34"->"35";
    "36" [label="$r7 = r1.blocks",];
    "35"->"36";
    "40" [label="label4: $i20 = i9 * i4",];
    "35"->"40";
    "37" [label="i5 = i5 + 1",];
    "36"->"37";
    "38" [label="r2 = $r7[i5]",];
    "37"->"38";
    "39" [label="i6 = 0",];
    "38"->"39";
    "39"->"40";
    "41" [label="$i21 = $i20 + i3",];
    "40"->"41";
    "42" [label="$i22 = i6",];
    "41"->"42";
    "43" [label="i6 = i6 + 1",];
    "42"->"43";
    "44" [label="$d0 = r2[$i22]",];
    "43"->"44";
    "45" [label="r3[$i21] = $d0",];
    "44"->"45";
    "46" [label="i9 = i9 + 1",];
    "45"->"46";
    "47" [label="goto label3",];
    "46"->"47";
    "47"->"33";
    "49" [label="goto label2",];
    "48"->"49";
    "49"->"24";
}
